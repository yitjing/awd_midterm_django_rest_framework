# implement the end point
from django.http import JsonResponse
from rest_api_app.models import *
from rest_api_app.serializers import *

#rest_framework imports
from rest_framework.parsers import JSONParser
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from rest_framework import generics
from rest_framework import mixins
from rest_framework import filters

# Create your views here.
#GET  http://127.0.0.1:8000/api/protein/[PROTEIN ID] - return the protein sequence and all we know about it
class SpecificProteinListView(generics.ListAPIView):
	serializer_class = SpecificProteinSerializer
	
	def get_queryset(self):
		protein_id = self.kwargs['protein_id']
		queryset = Protein.objects.filter(protein_id=protein_id)
		return queryset

#POST http://127.0.0.1:8000/api/protein/ - add a new record
class AddNewProtein(mixins.ListModelMixin,
		    mixins.CreateModelMixin,
		    generics.GenericAPIView):
	queryset = Protein.objects.all()
	serializer_class = SpecificProteinSerializer
	
	def post(self, request, *args, **kwargs):
		return self.create(request, *args, **kwargs)
	
#GET  http://127.0.0.1:8000/api/pfam/[PFAM ID] - return the domain and it's description
#return a list of domains from a domain module
class PfamListView(generics.RetrieveAPIView):
	queryset = Domain.objects.all()
	serializer_class = PfamSerializer
	lookup_field = 'domain_id'
	
	#def get_queryset(self):
	#	domain_id = self.kwargs['domain_id']
	#	return Domain.objects.filter(domain_id = domain_id)

#GET  http://127.0.0.1:8000/api/proteins/[TAXA ID] - return a list of all proteins for a given organism
class ProteinOrganismListView(generics.ListAPIView):
	serializer_class = OrganismProteinSerializer
	
	def get_queryset(self):
		taxa_id = self.kwargs['taxa_id']
		queryset = DomainProtein.objects.filter(protein__taxonomy__taxa_id=taxa_id)
		return queryset
	
#GET  http://127.0.0.1:8000/api/pfams/[TAXA ID] - return a list of all domains in all the proteins for a given organism.
#NOTE: "id" here is sequential the primary key value generated by django for the table that holds the domain data
class OrganismDomainListView(generics.ListAPIView):
	serializer_class = OrganismDomainSerializer
	
	def get_queryset(self):
		taxa_id = self.kwargs['taxa_id']
		queryset = DomainProtein.objects.filter(protein__taxonomy__taxa_id=taxa_id)
		return queryset
	
#GET  http://127.0.0.1:8000/api/coverage/[PROTEIN ID] - return the domain coverage for a given protein. That is Sum of the protein domain lengths (start-stop)/length of protein.
class DomainCoverageListView(generics.RetrieveAPIView):
	serializer_class = DomainCoverageSerializer
	
	def retrieve(self, request, *args, **kwargs):
		protein_id = self.kwargs['protein_id']
		protein = Protein.objects.get(protein_id=protein_id)
		
		domains = Domain.objects.filter(protein=protein)
		coverage = sum((domain.end_coor - domain.start_coor)/protein.protein_length for domain in domains)
		return Response(coverage)
	 
	 
